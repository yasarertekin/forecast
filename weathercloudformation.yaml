Description: >
  AWS Lambda Nodejs Forecast project.

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "call"

  AverageTempFunctionVersion:
    Description: "Version of the Average Temp lambda function required to update existing stack"
    Type: String
    Default: "latest"

  CurrentTempFunctionVersion:
    Description: "Version of the Current Temp lambda function required to update existing stack"
    Type: String
    Default: "latest"

  S3BucketName:
    Description: "S3BucketName"
    Type: "String"

Resources:
  ForecastRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "ForecastRestApi"
      FailOnWarnings: "true"
  AverageTempResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - "ForecastRestApi"
          - "RootResourceId"
      PathPart: "avgtempinsfax"
      RestApiId:
        Ref: ForecastRestApi
  CurrentTempResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - "ForecastRestApi"
          - "RootResourceId"
      PathPart: "currenttempincovilha"
      RestApiId:
        Ref: ForecastRestApi

  ForecastRestApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  CloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  Account:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn:
        "Fn::GetAtt":
          - CloudWatchRole
          - Arn

  FunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "forecast-function-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "FunctionPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - arn:aws:s3:::*

  AverageTempMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ResourceId:
        Ref: "AverageTempResource"
      RestApiId:
        Ref: "ForecastRestApi"
      MethodResponses:
        - StatusCode: 200
      Integration:
        Credentials: !GetAtt "ForecastRestApiRole.Arn"
        IntegrationHttpMethod: "GET"
        Type: "AWS_PROXY"
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AverageTempFunction.Arn}/invocations
        IntegrationResponses: []

  AverageTempApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - AverageTempMethod
    Properties:
      RestApiId:
        Ref: "ForecastRestApi"
      Description:
        Fn::Sub: "Forecast Rest API deployment ${AverageTempFunctionVersion}"

  CurrentTempApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - CurrentTempMethod
    Properties:
      RestApiId:
        Ref: "ForecastRestApi"
      Description:
        Fn::Sub: "Forecast Rest API deployment ${AverageTempFunctionVersion}"

  CurrentTempMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ResourceId: !Ref "CurrentTempResource"
      RestApiId: !Ref "ForecastRestApi"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin": true

      Integration:
        Credentials: !GetAtt "ForecastRestApiRole.Arn"
        IntegrationHttpMethod: "GET"
        Type: "AWS_PROXY"
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CurrentTempFunction.Arn}/invocations
        IntegrationResponses: []

  AverageTempFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: AverageTemp
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub AverageTempFunction-${AverageTempFunctionVersion}.zip
      Handler: function/averagetemp/index.handler
      MemorySize: 128
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs10.x

  CurrentTempFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: CurrentTemp
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub CurrentTempFunction-${CurrentTempFunctionVersion}.zip
      Handler: function/currenttemp/index.handler
      MemorySize: 128
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs10.x

  AverageTempGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "AverageTempFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ForecastRestApi}/*/*"

  CurrentTempGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "CurrentTempFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ForecastRestApi}/*/*/"

  AverageTempApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName:
        Fn::Sub: "${apiGatewayStageName}-stage"
      Description:
        Fn::Sub: "${apiGatewayStageName} Stage"
      RestApiId:
        Ref: "ForecastRestApi"
      DeploymentId:
        Ref: "AverageTempApiDeployment"
      MethodSettings:
        -
          ResourcePath: "/"
          HttpMethod: "GET"
          LoggingLevel: "ERROR"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
        -
          ResourcePath: "/avgtempinsfax"
          HttpMethod: "GET"
          LoggingLevel: "ERROR"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
          ThrottlingBurstLimit: "555"
        -
          ResourcePath: "/currenttempincovilha"
          HttpMethod: "GET"
          LoggingLevel: "ERROR"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
          ThrottlingBurstLimit: "555"

Outputs:
  ForecastRestApi:
    Description: The Forecast Api
    Value: !Ref ForecastRestApi
    Export:
      Name: !Sub "ForecastRestApi"
